# Generated by Django 5.1.5 on 2025-02-12 10:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bundesland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('abbreviation', models.CharField(max_length=5, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CalendarSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_start', models.TimeField(default='07:00:00')),
                ('display_end', models.TimeField(default='19:00:00')),
                ('weekends', models.BooleanField(default=True)),
                ('default_view', models.CharField(choices=[('dayGridMonth', 'Month View'), ('timeGridWeek', 'Week View'), ('timeGridDay', 'Day View')], default='dayGridMonth', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('provider_id', models.CharField(max_length=100, unique=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceProviderGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('dob', models.DateField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other', max_length=10)),
                ('email', models.EmailField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('medical_history', models.TextField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('receive_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PracticeSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('practice_name', models.CharField(max_length=255)),
                ('practice_logo', models.ImageField(blank=True, null=True, upload_to='practice_logos/')),
                ('license_number', models.CharField(max_length=100)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=255)),
                ('website', models.URLField(blank=True, max_length=255, null=True)),
                ('opening_time', models.TimeField()),
                ('closing_time', models.TimeField()),
                ('days_open', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('capacity', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Raum',
                'verbose_name_plural': 'RÃ¤ume',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Staff', 'Staff')], default='Staff', max_length=50)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ICDCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcodes', to='core.icdcode')),
            ],
            options={
                'verbose_name': 'ICD-11 Code',
                'verbose_name_plural': 'ICD-11 Codes',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='BillingCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_submitted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('insurance_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing_cycles', to='core.insuranceprovider')),
            ],
        ),
        migrations.AddField(
            model_name='insuranceprovider',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='providers', to='core.insuranceprovidergroup'),
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('relationship', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=20)),
                ('phone_number2', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='PatientInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance_number', models.CharField(blank=True, max_length=100, null=True)),
                ('valid_from', models.DateField()),
                ('valid_to', models.DateField(blank=True, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('insurance_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.insuranceprovider')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurances', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Practice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Praxisname')),
                ('owner_name', models.CharField(max_length=255, verbose_name='Inhaber')),
                ('street_address', models.CharField(max_length=255, verbose_name='StraÃe')),
                ('postal_code', models.CharField(max_length=5, verbose_name='PLZ')),
                ('city', models.CharField(max_length=255, verbose_name='Stadt')),
                ('phone', models.CharField(max_length=20, verbose_name='Telefon')),
                ('fax', models.CharField(blank=True, max_length=20, null=True, verbose_name='Fax')),
                ('email', models.EmailField(max_length=254, verbose_name='E-Mail')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Webseite')),
                ('institution_code', models.CharField(help_text='9-stellige BetriebsstÃ¤ttennummer', max_length=9, unique=True, verbose_name='BetriebsstÃ¤ttennummer')),
                ('tax_id', models.CharField(help_text='Steuernummer der Praxis', max_length=11, unique=True, verbose_name='Steuernummer')),
                ('opening_hours', models.JSONField(default=dict, help_text='Ãffnungszeiten der Praxis im JSON-Format', verbose_name='Ãffnungszeiten')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='practice/logos/', verbose_name='Praxislogo')),
                ('bank_details', models.JSONField(default=dict, help_text='Bankverbindung der Praxis im JSON-Format', verbose_name='Bankverbindung')),
                ('additional_info', models.TextField(blank=True, help_text='Weitere Informationen zur Praxis', null=True, verbose_name='ZusÃ¤tzliche Informationen')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bundesland', models.ForeignKey(help_text='Bundesland der Praxis fÃ¼r Feiertagsregelung', on_delete=django.db.models.deletion.PROTECT, to='core.bundesland', verbose_name='Bundesland')),
            ],
            options={
                'verbose_name': 'Praxis',
                'verbose_name_plural': 'Praxen',
            },
        ),
        migrations.CreateModel(
            name='Practitioner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='practitioner', to=settings.AUTH_USER_MODEL)),
                ('default_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='practitioners', to='core.room')),
                ('specialization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.specialization')),
            ],
            options={
                'verbose_name': 'Therapeut',
                'verbose_name_plural': 'Therapeuten',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='default_practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_users', to='core.practitioner'),
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('practicename', models.CharField(max_length=100, null=True)),
                ('title', models.CharField(max_length=100, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('specializations', models.ManyToManyField(related_name='doctors', to='core.specialization')),
            ],
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('duration_minutes', models.IntegerField()),
                ('is_self_pay', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
            ],
        ),
        migrations.CreateModel(
            name='Surcharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance_payment', models.DecimalField(decimal_places=2, max_digits=10)),
                ('patient_payment', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('insurance_provider_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.insuranceprovidergroup')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.treatment')),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_text', models.CharField(editable=False, max_length=255, verbose_name='Diagnosetext')),
                ('number_of_sessions', models.IntegerField(default=1)),
                ('sessions_completed', models.IntegerField(default=0)),
                ('therapy_frequency_type', models.CharField(choices=[('weekly_1', '1x pro Woche'), ('weekly_2', '2x pro Woche'), ('weekly_3', '3x pro Woche'), ('weekly_4', '4x pro Woche'), ('weekly_5', '5x pro Woche'), ('monthly_1', '1x pro Monat'), ('monthly_2', '2x pro Monat'), ('monthly_3', '3x pro Monat'), ('monthly_4', '4x pro Monat')], default='weekly_1', max_length=20)),
                ('therapy_goals', models.TextField(blank=True, null=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('requires_home_visit', models.BooleanField(default=False)),
                ('therapy_report_required', models.BooleanField(default=False)),
                ('prescription_date', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('Open', 'Offen'), ('In_Progress', 'In Behandlung'), ('Completed', 'Abgeschlossen'), ('Cancelled', 'Storniert')], default='Open', max_length=20)),
                ('pdf_document', models.FileField(blank=True, null=True, upload_to='prescriptions/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diagnosis_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prescriptions', to='core.icdcode', verbose_name='ICD-10 Code')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
                ('patient_insurance', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.patientinsurance')),
                ('treatment_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions_as_primary', to='core.treatment', verbose_name='Erstbehandlung')),
                ('treatment_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions_as_secondary', to='core.treatment', verbose_name='ErgÃ¤nzende Behandlung 1')),
                ('treatment_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions_as_tertiary', to='core.treatment', verbose_name='ErgÃ¤nzende Behandlung 2')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('icd_codes', models.ManyToManyField(related_name='diagnosis_groups', to='core.icdcode')),
                ('treatments', models.ManyToManyField(related_name='diagnosis_groups', to='core.treatment')),
            ],
            options={
                'verbose_name': 'Diagnosis Group',
                'verbose_name_plural': 'Diagnosis Groups',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField()),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Geplant', 'Geplant'), ('Abgesagt', 'Abgesagt'), ('Abgeschlossen', 'Abgeschlossen')], default='Geplant', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Optional: Notizen zum Termin', null=True)),
                ('series_identifier', models.CharField(blank=True, help_text='Identifiziert zusammenhÃ¤ngende Termine', max_length=100, null=True)),
                ('is_recurring', models.BooleanField(default=False, help_text='Gibt an, ob dieser Termin Teil einer Serie ist')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
                ('practitioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.practitioner')),
                ('prescription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.prescription')),
                ('room', models.ForeignKey(blank=True, help_text='Raum, falls zugeordnet', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.room')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.treatment')),
            ],
        ),
        migrations.CreateModel(
            name='WorkingHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=9)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='working_hours', to='core.practitioner')),
            ],
        ),
        migrations.CreateModel(
            name='LocalHoliday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holiday_name', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('is_recurring', models.BooleanField(default=True, help_text='JÃ¤hrlich wiederkehrender Feiertag')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bundesland', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bundesland')),
            ],
            options={
                'verbose_name': 'Feiertag',
                'verbose_name_plural': 'Feiertage',
                'ordering': ['date'],
                'unique_together': {('bundesland', 'date')},
            },
        ),
        migrations.AddConstraint(
            model_name='patientinsurance',
            constraint=models.CheckConstraint(condition=models.Q(('valid_to__isnull', True), ('valid_to__gt', models.F('valid_from')), _connector='OR'), name='valid_date_range'),
        ),
        migrations.AlterUniqueTogether(
            name='workinghour',
            unique_together={('practitioner', 'day_of_week', 'start_time', 'end_time')},
        ),
    ]
